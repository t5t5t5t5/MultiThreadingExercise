using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace MultiThreadeningExercise
{
    class Program
    {
        static void Main(string[] args)
        {
            
            Console.WriteLine("---Before Start Threads---");
            //create array of threads
            Thread[] threadArray = new Thread[4];
            //store length of array in var to work better in the following
            int array_Length = threadArray.Length;

            //start the program interface
            threadArray[0] = new Thread(new ThreadStart (MyThreadClass.ProgramStarting));

            //Right triangle measures variables
            double hypotenuse = 0;//hypotenuse = c
            double opposite = 0; //opposite = a
            double adjacent = 0; //adjacent = b

            double sin = 0;
            double cos = 0;
            double tan = 0;

            //ask the user for the right triangle measures: opposite
            threadArray[1] = new Thread(() => opposite = MyThreadClass.AskOpposite());
            //ask the user for the right triangle measures: adjacent
            threadArray[2] = new Thread(() => adjacent = MyThreadClass.AskAdjacent());

            //start the threads
            for(int i = 0; i < 3; i++)
            {
                threadArray[i].Start();     
                threadArray[i].Join();
            }

            //Console.WriteLine("a = " + opposite);
            //Console.WriteLine("b = " + adjacent);

            //get hypotenuse = c
            threadArray[0] = new Thread(() => hypotenuse = MyThreadClass.GetHypotenuse(opposite, adjacent));
            //threadArray[3] = new Thread(() => Console.WriteLine(" b = " + adjacent));
            threadArray[0].Start();
            threadArray[0].Join();

            //distributing tasks
            threadArray[1] = new Thread(() => sin = MyThreadClass.CalcSin(opposite, hypotenuse));
            threadArray[2] = new Thread(() => cos = MyThreadClass.CalcCos(adjacent, hypotenuse));
            
            threadArray[0] = new Thread(() => tan = MyThreadClass.CalcTan(sin, cos));
            
            for (int i = 2; i >= 0; i--)
            {
                threadArray[i].Start();
                threadArray[i].Join();
            }
           
            threadArray[1] = new Thread(() => MyThreadClass.DisplayResults(opposite, adjacent, hypotenuse, sin, cos, tan));
            threadArray[1].Start();
            threadArray[1].Join();

            //pause the program
            Console.ReadKey();
        }
    }
}
